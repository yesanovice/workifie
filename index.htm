<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Work Session Tracker</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

  <link rel="icon" href="favicon.png" type="image/png">
  <link rel="apple-touch-icon" href="favicon.png">
  <link rel="manifest" href="manifest.json">

  <style>
    :root {
      --primary: #4361ee;
      --primary-dark: #3a56d4;
      --secondary: #3f37c9;
      --accent: #4895ef;
      --danger: #f72585;
      --danger-dark: #e5177b;
      --success: #4cc9f0;
      --light: #f8f9fa;
      --dark: #212529;
      --gray: #6c757d;
      --light-gray: #e9ecef;
      --border-radius: 16px;
      --box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
      --transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
      --gradient-primary: linear-gradient(135deg, var(--primary), var(--accent));
      --gradient-danger: linear-gradient(135deg, var(--danger), #ff6b9e);
      --gradient-success: linear-gradient(135deg, var(--success), #6fffe9);
    }
    
    * { 
      box-sizing: border-box; 
      margin: 0; 
      padding: 0; 
    }
    
    body { 
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: linear-gradient(145deg, #f5f7ff, #f0f4ff); 
      color: var(--dark); 
      display: flex; 
      min-height: 100vh; 
      line-height: 1.6;
      overflow-x: hidden;
    }
    
    .sidebar { 
      width: 320px; 
      background: white; 
      padding: 30px 25px; 
      border-right: 1px solid rgba(233, 236, 239, 0.5);
      display: flex; 
      flex-direction: column;
      box-shadow: 5px 0 25px rgba(0, 0, 0, 0.03);
      z-index: 10;
      position: relative;
      overflow-y: auto;
    }
    
    .rightbar { 
      width: 320px; 
      background: white; 
      padding: 30px 25px; 
      border-left: 1px solid rgba(233, 236, 239, 0.5);
      box-shadow: -5px 0 25px rgba(0, 0, 0, 0.03);
      z-index: 10;
      position: relative;
      overflow-y: auto;
    }
    
    .main { 
      flex: 1; 
      display: flex; 
      flex-direction: column; 
      padding: 40px; 
      max-width: 900px;
      margin: 0 auto;
      position: relative;
    }
    
    /* Floating background elements */
    .bg-circle {
      position: absolute;
      border-radius: 50%;
      filter: blur(60px);
      opacity: 0.15;
      z-index: -1;
    }
    
    .circle-1 {
      width: 300px;
      height: 300px;
      background: var(--primary);
      top: -100px;
      right: -100px;
    }
    
    .circle-2 {
      width: 400px;
      height: 400px;
      background: var(--accent);
      bottom: -150px;
      left: -150px;
    }
    
    .circle-3 {
      width: 200px;
      height: 200px;
      background: var(--danger);
      top: 50%;
      right: 50px;
    }
    
    h1 { 
      color: var(--dark);
      font-size: 2.5rem; 
      font-weight: 800;
      margin-bottom: 1.5rem;
      background: linear-gradient(90deg, var(--primary), var(--accent));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      position: relative;
      display: inline-block;
    }
    
    h1::after {
      content: '';
      position: absolute;
      bottom: -5px;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(90deg, var(--primary), var(--accent));
      border-radius: 3px;
      transform: scaleX(0);
      transform-origin: left;
      transition: var(--transition);
    }
    
    h1:hover::after {
      transform: scaleX(1);
    }
    
    .timer { 
      font-size: 4rem; 
      font-weight: 700;
      font-family: 'Courier New', monospace;
      margin: 2rem 0;
      letter-spacing: 2px;
      color: var(--dark);
      text-align: center;
      background: white;
      padding: 2rem 3rem;
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      position: relative;
      overflow: hidden;
      transition: var(--transition);
    }
    
    .timer::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 5px;
      height: 100%;
      background: var(--gradient-primary);
      transition: var(--transition);
    }
    
    .timer:hover::before {
      width: 10px;
    }
    
    button {
      background: var(--gradient-primary);
      color: white;
      padding: 1rem 2rem;
      border: none;
      border-radius: var(--border-radius);
      margin: 0.5rem;
      cursor: pointer;
      font-size: 1rem;
      font-weight: 600;
      transition: var(--transition);
      box-shadow: 0 4px 15px rgba(67, 97, 238, 0.3);
      position: relative;
      overflow: hidden;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      min-width: 160px;
    }
    
    button i {
      margin-right: 8px;
      font-size: 1.1em;
    }
    
    button::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(rgba(255,255,255,0.1), rgba(255,255,255,0.3));
      transform: translateY(100%);
      transition: var(--transition);
    }
    
    button:hover { 
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(67, 97, 238, 0.4);
    }
    
    button:hover::after {
      transform: translateY(0);
    }
    
    button:active {
      transform: translateY(1px);
    }
    
    button:disabled {
      background: var(--gray);
      cursor: not-allowed;
      box-shadow: none;
      transform: none;
    }
    
    .btn-danger {
      background: var(--gradient-danger);
      box-shadow: 0 4px 15px rgba(247, 37, 133, 0.3);
    }
    
    .btn-danger:hover {
      box-shadow: 0 8px 25px rgba(247, 37, 133, 0.4);
    }
    
    .btn-success {
      background: var(--gradient-success);
      box-shadow: 0 4px 15px rgba(76, 201, 240, 0.3);
    }
    
    .btn-success:hover {
      box-shadow: 0 8px 25px rgba(76, 201, 240, 0.4);
    }
    
    input, textarea {
      padding: 1rem 1.5rem;
      font-size: 1rem;
      border-radius: var(--border-radius);
      border: 1px solid var(--light-gray);
      margin: 1rem 0;
      width: 100%;
      max-width: 500px;
      transition: var(--transition);
      font-family: inherit;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }
    
    input:focus, textarea:focus {
      outline: none;
      border-color: var(--accent);
      box-shadow: 0 0 0 3px rgba(72, 149, 239, 0.2), 0 5px 20px rgba(72, 149, 239, 0.1);
      transform: translateY(-2px);
    }
    
    .session-list { 
      width: 100%; 
      margin-top: 2rem;
    }
    
    .session { 
      background: white;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      border-left: 5px solid var(--accent);
      box-shadow: var(--box-shadow);
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-radius: var(--border-radius);
      transition: var(--transition);
      position: relative;
      overflow: hidden;
    }
    
    .session::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, rgba(72, 149, 239, 0.1), transparent);
      transform: translateX(-100%);
      transition: var(--transition);
    }
    
    .session:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
    }
    
    .session:hover::before {
      transform: translateX(0);
    }
    
    .session-details { 
      flex: 1;
    }
    
    .session-name {
      font-weight: 600;
      color: var(--dark);
      margin-bottom: 0.75rem;
      font-size: 1.1rem;
      position: relative;
      display: inline-block;
    }
    
    .session-name::after {
      content: '';
      position: absolute;
      bottom: -3px;
      left: 0;
      width: 40px;
      height: 2px;
      background: var(--accent);
      transition: var(--transition);
    }
    
    .session:hover .session-name::after {
      width: 80px;
    }
    
    .session-meta {
      display: flex;
      gap: 1.5rem;
      font-size: 0.95rem;
      color: var(--gray);
    }
    
    .session-meta span {
      display: flex;
      align-items: center;
      gap: 5px;
    }
    
    .session-meta i {
      font-size: 0.9em;
      color: var(--accent);
    }
    
    .delete-btn { 
      background: var(--gradient-danger);
      border: none;
      padding: 0.75rem 1.25rem;
      border-radius: var(--border-radius);
      color: white;
      font-size: 0.95rem;
      cursor: pointer;
      transition: var(--transition);
      margin-left: 1rem;
      display: flex;
      align-items: center;
      box-shadow: 0 2px 10px rgba(247, 37, 133, 0.3);
    }
    
    .delete-btn:hover { 
      transform: translateY(-3px);
      box-shadow: 0 5px 15px rgba(247, 37, 133, 0.4);
    }
    
    .quote { 
      font-style: italic;
      line-height: 1.7;
      color: var(--gray);
      padding: 2rem;
      background: white;
      border-radius: var(--border-radius);
      margin-bottom: 2rem;
      box-shadow: var(--box-shadow);
      position: relative;
      overflow: hidden;
      border: 1px solid rgba(233, 236, 239, 0.5);
    }
    
    .quote::before {
      content: '"';
      font-size: 8rem;
      position: absolute;
      top: -3rem;
      left: 0.5rem;
      color: rgba(233, 236, 239, 0.5);
      z-index: 0;
      font-family: Georgia, serif;
      line-height: 1;
    }
    
    .quote-content {
      position: relative;
      z-index: 1;
      font-size: 1.1rem;
    }
    
    .quote-author {
      display: block;
      margin-top: 1rem;
      text-align: right;
      font-style: normal;
      font-weight: 500;
      color: var(--dark);
    }
    
    .session-count { 
      font-size: 3rem; 
      font-weight: 800;
      color: var(--primary);
      text-align: center;
      margin: 1rem 0;
      text-shadow: 0 3px 10px rgba(67, 97, 238, 0.2);
    }
    
    .session-count-label {
      font-size: 1.1rem;
      color: var(--gray);
      text-transform: uppercase;
      letter-spacing: 2px;
      font-weight: 600;
      text-align: center;
      position: relative;
      display: inline-block;
      width: 100%;
    }
    
    .session-count-label::after {
      content: '';
      position: absolute;
      bottom: -8px;
      left: 50%;
      transform: translateX(-50%);
      width: 40px;
      height: 3px;
      background: var(--accent);
      border-radius: 3px;
    }
    
    .auth-form { 
      background: white;
      padding: 3rem;
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      width: 100%;
      max-width: 500px;
      margin: 2rem auto;
      text-align: center;
      position: relative;
      overflow: hidden;
      border: 1px solid rgba(233, 236, 239, 0.5);
    }
    
    .auth-form::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 5px;
      height: 100%;
      background: var(--gradient-primary);
    }
    
    .auth-form h2 { 
      margin-bottom: 2rem; 
      color: var(--dark);
      font-weight: 700;
      font-size: 1.8rem;
      background: linear-gradient(90deg, var(--primary), var(--accent));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }
    
    .auth-toggle { 
      background: none; 
      border: none; 
      color: var(--accent); 
      text-decoration: none;
      cursor: pointer; 
      font-size: 0.95rem;
      margin-top: 1.5rem;
      transition: var(--transition);
      font-weight: 500;
      display: inline-flex;
      align-items: center;
      gap: 5px;
    }
    
    .auth-toggle:hover { 
      color: var(--primary-dark);
      text-decoration: underline;
    }
    
    .error-message { 
      color: var(--danger); 
      margin: 1rem 0; 
      font-size: 0.95rem;
      padding: 0.75rem;
      background: rgba(247, 37, 133, 0.1);
      border-radius: var(--border-radius);
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }
    
    .hidden { 
      display: none; 
    }
    
    .user-info { 
      margin: 1.5rem 0;
      font-size: 1.1rem;
      color: var(--gray);
      text-align: center;
      font-weight: 600;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
    }
    
    .user-info i {
      color: var(--accent);
      font-size: 1.2em;
    }
    
    .logout-btn { 
      background: var(--gradient-danger);
      margin-left: auto;
    }
    
    .badge-container { 
      margin-top: 2rem;
      text-align: center;
      background: white;
      padding: 2rem;
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      border: 1px solid rgba(233, 236, 239, 0.5);
      position: relative;
      overflow: hidden;
    }
    
    .badge-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 5px;
      background: var(--gradient-primary);
    }
    
    .badge { 
      display: inline-block;
      padding: 0.75rem 1.5rem;
      margin: 0.5rem;
      border-radius: 100px;
      font-weight: 700;
      font-size: 0.95rem;
      box-shadow: 0 3px 15px rgba(0,0,0,0.1);
      position: relative;
      transition: var(--transition);
      transform-style: preserve-3d;
    }
    
    .badge::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: inherit;
      border-radius: inherit;
      transform: translateZ(-1px);
      filter: blur(5px);
      opacity: 0.7;
      transition: var(--transition);
    }
    
    .badge:hover {
      transform: translateY(-5px) scale(1.05);
    }
    
    .badge:hover::before {
      filter: blur(8px);
      opacity: 0.9;
    }
    
    .badge::after { 
      content: '✓';
      position: absolute;
      right: -5px;
      top: -5px;
      background: var(--success);
      color: white;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.8rem;
      font-weight: bold;
      box-shadow: 0 2px 5px rgba(0,0,0,0.2);
      z-index: 2;
    }
    
    .current-badge { 
      transform: scale(1.15);
      box-shadow: 0 10px 25px rgba(0,0,0,0.15);
      margin: 1.5rem 0;
      padding: 1rem 2rem;
      font-size: 1.3rem;
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0% { transform: scale(1.15); }
      50% { transform: scale(1.2); }
      100% { transform: scale(1.15); }
    }
    
    .badge-progress { 
      width: 100%;
      height: 12px;
      background: var(--light-gray);
      border-radius: 10px;
      margin-top: 2rem;
      overflow: hidden;
      position: relative;
    }
    
    .progress-bar { 
      height: 100%;
      background: var(--gradient-primary);
      transition: width 0.5s ease-out;
      border-radius: 10px;
      position: relative;
      overflow: hidden;
    }
    
    .progress-bar::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, 
        rgba(255,255,255,0) 0%, 
        rgba(255,255,255,0.3) 50%, 
        rgba(255,255,255,0) 100%);
      animation: progressShine 2s infinite;
    }
    
    @keyframes progressShine {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(100%); }
    }
    
    .badge-info { 
      margin-top: 1.5rem;
      font-size: 1rem;
      color: var(--gray);
      font-weight: 500;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }
    
    .badge-info i {
      color: var(--accent);
    }
    
    .badge-clown { background: linear-gradient(135deg, #f39c12, #f1c40f); color: white; }
    .badge-noob { background: linear-gradient(135deg, #e74c3c, #f1a9a0); color: white; }
    .badge-novice { background: linear-gradient(135deg, #9b59b6, #be90d4); color: white; }
    .badge-apprentice { background: linear-gradient(135deg, #3498db, #89c4f4); color: white; }
    .badge-regular { background: linear-gradient(135deg, #1abc9c, #86e2d5); color: white; }
    .badge-dedicated { background: linear-gradient(135deg, #f1c40f, #f9d423); color: #333; }
    .badge-professional { background: linear-gradient(135deg, #e67e22, #f5ab35); color: white; }
    .badge-master { background: linear-gradient(135deg, #2ecc71, #82e0aa); color: white; }
    .badge-sigma { background: linear-gradient(135deg, #34495e, #5d6d7e); color: white; }
    .badge-chad { background: linear-gradient(135deg, #8e44ad, #9b59b6); color: white; }
    .badge-sigma-chad { background: linear-gradient(135deg, #c0392b, #e74c3c); color: white; }
    .badge-giga-chad { background: linear-gradient(135deg, #34495e, #8e44ad); color: white; }
    .badge-sigma-giga-chad { background: linear-gradient(135deg, #34495e, #8e44ad, #c0392b); color: white; }
    
    .badge-title {
      font-size: 1.3rem;
      font-weight: 700;
      margin-bottom: 1rem;
      color: var(--dark);
      position: relative;
      display: inline-block;
    }
    
    .badge-title::after {
      content: '';
      position: absolute;
      bottom: -8px;
      left: 50%;
      transform: translateX(-50%);
      width: 50px;
      height: 3px;
      background: var(--accent);
      border-radius: 3px;
    }
    
    .controls {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-wrap: wrap;
      margin: 2rem 0;
      gap: 1rem;
    }
    
    .all-badges {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      margin-top: 2rem;
    }
    
    .badge-section {
      background: white;
      padding: 2rem;
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      border: 1px solid rgba(233, 236, 239, 0.5);
    }
    
    .badge-section-title {
      font-size: 1.1rem;
      font-weight: 700;
      color: var(--gray);
      margin-bottom: 1.5rem;
      text-transform: uppercase;
      letter-spacing: 1px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .badge-section-title::before {
      content: '';
      flex: 1;
      height: 1px;
      background: var(--light-gray);
    }
    
    .badge-section-title::after {
      content: '';
      flex: 1;
      height: 1px;
      background: var(--light-gray);
    }
    
    .badge-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
      gap: 1.5rem;
    }
    
    .badge-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
      transition: var(--transition);
    }
    
    .badge-item:hover {
      transform: translateY(-5px);
    }
    
    .badge-icon {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      margin-bottom: 1rem;
      box-shadow: 0 5px 20px rgba(0,0,0,0.1);
      font-size: 2rem;
      position: relative;
      transition: var(--transition);
    }
    
    .badge-icon::before {
      content: '';
      position: absolute;
      top: -5px;
      left: -5px;
      right: -5px;
      bottom: -5px;
      border-radius: 50%;
      background: inherit;
      filter: blur(10px);
      opacity: 0.5;
      z-index: -1;
      transition: var(--transition);
    }
    
    .badge-item:hover .badge-icon {
      transform: scale(1.1);
    }
    
    .badge-item:hover .badge-icon::before {
      filter: blur(15px);
      opacity: 0.7;
    }
    
    .badge-name {
      font-size: 0.9rem;
      font-weight: 600;
      color: var(--dark);
      margin-bottom: 0.25rem;
    }
    
    .badge-requirement {
      font-size: 0.75rem;
      color: var(--gray);
      opacity: 0.8;
    }
    
    .locked-badge {
      opacity: 0.5;
      filter: grayscale(70%);
    }
    
    .locked-badge .badge-icon {
      position: relative;
    }
    
    .locked-badge .badge-icon::after {
      content: '🔒';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 1.5rem;
      opacity: 0.7;
    }
    
    .app-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 3rem;
      position: relative;
    }
    
    .total-hours {
      text-align: center;
      margin-top: 2rem;
      padding-top: 1.5rem;
      border-top: 1px dashed var(--light-gray);
      font-size: 1.2rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }
    
    .total-hours i {
      color: var(--accent);
    }
    
    .total-hours strong {
      color: var(--primary);
      font-weight: 700;
    }
    
    /* Confetti effect */
    .confetti {
      position: absolute;
      width: 10px;
      height: 10px;
      background-color: var(--accent);
      opacity: 0;
      z-index: 100;
      animation: confetti 3s ease-out;
    }
    
    @keyframes confetti {
      0% { transform: translateY(0) rotate(0deg); opacity: 1; }
      100% { transform: translateY(500px) rotate(720deg); opacity: 0; }
    }
    
    /* Toast notifications */
    .toast {
      position: fixed;
      bottom: 30px;
      right: 30px;
      background: white;
      padding: 1rem 1.5rem;
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      display: flex;
      align-items: center;
      gap: 10px;
      transform: translateY(100px);
      opacity: 0;
      transition: all 0.3s ease;
      z-index: 1000;
      border-left: 5px solid var(--success);
    }
    
    .toast.show {
      transform: translateY(0);
      opacity: 1;
    }
    
    .toast i {
      color: var(--success);
      font-size: 1.2rem;
    }
    
    /* Empty state */
    .empty-state {
      text-align: center;
      padding: 3rem 2rem;
      color: var(--gray);
    }
    
    .empty-state i {
      font-size: 3rem;
      color: var(--light-gray);
      margin-bottom: 1.5rem;
    }
    
    .empty-state h3 {
      font-size: 1.3rem;
      margin-bottom: 0.5rem;
      color: var(--dark);
    }
    
    .empty-state p {
      font-size: 1rem;
    }
    
    /* Responsive design */
    @media (max-width: 1200px) {
      .sidebar, .rightbar {
        width: 280px;
      }
      
      .timer {
        font-size: 3.5rem;
      }
    }
    
    @media (max-width: 992px) {
      body {
        flex-direction: column;
      }
      
      .sidebar, .rightbar {
        width: 100%;
        border-right: none;
        border-left: none;
        padding: 2rem;
      }
      
      .rightbar {
        order: 3;
      }
      
      .main {
        padding: 3rem;
        order: 2;
      }
      
      .badge-grid {
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
      }
      
      .circle-1, .circle-2, .circle-3 {
        display: none;
      }
    }
    
    @media (max-width: 768px) {
      .main {
        padding: 2rem;
      }
      
      .timer {
        font-size: 2.5rem;
        padding: 1.5rem;
      }
      
      .controls {
        flex-direction: column;
      }
      
      button {
        width: 100%;
        margin: 0.5rem 0;
      }
      
      .session-meta {
        flex-direction: column;
        gap: 0.5rem;
      }
      
      .auth-form {
        padding: 2rem;
      }
    }
    
    @media (max-width: 576px) {
      .main {
        padding: 1.5rem;
      }
      
      h1 {
        font-size: 2rem;
      }
      
      .timer {
        font-size: 2rem;
        padding: 1rem;
      }
      
      .badge-icon {
        width: 60px;
        height: 60px;
        font-size: 1.5rem;
      }
      
      .badge-name {
        font-size: 0.8rem;
      }
      
      .badge-requirement {
        font-size: 0.65rem;
      }
      
      .auth-form {
        padding: 1.5rem;
      }
    }
    
    /* Animations */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .animate-fadeIn {
      animation: fadeIn 0.5s ease-out;
    }
    
    @keyframes slideIn {
      from { opacity: 0; transform: translateX(-20px); }
      to { opacity: 1; transform: translateX(0); }
    }
    
    .animate-slideIn {
      animation: slideIn 0.4s ease-out;
    }
    
    /* Custom scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }
    
    ::-webkit-scrollbar-track {
      background: rgba(233, 236, 239, 0.5);
      border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb {
      background: rgba(67, 97, 238, 0.5);
      border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
      background: var(--primary);
    }
  </style>
</head>
<body>
  <!-- Floating background elements -->
  <div class="bg-circle circle-1"></div>
  <div class="bg-circle circle-2"></div>
  <div class="bg-circle circle-3"></div>

  <div class="sidebar">
    <div class="quote">
      <div class="quote-content" id="quote">"Discipline is the bridge between goals and accomplishment." <span class="quote-author">— Jim Rohn</span></div>
    </div>
    <div class="user-info" id="userInfo"></div>
    <div class="badge-container" id="badgeContainer">
      <div class="badge-title">Current Level</div>
      <div id="currentBadge"></div>
      <div class="badge-progress"><div class="progress-bar" id="progressBar"></div></div>
      <div class="badge-info" id="badgeInfo"></div>
      <!-- Total hours will be injected here by JavaScript -->
    </div>
  </div>

  <div class="main">
    <div id="authContainer">
      <div class="auth-form animate-fadeIn" id="loginForm">
        <h2>Login</h2>
        <div class="error-message" id="loginError"></div>
        <input type="text" id="loginUsername" placeholder="Username" required>
        <input type="password" id="loginPassword" placeholder="Password" required>
        <button id="loginBtn"><i class="fas fa-sign-in-alt"></i> Login</button>
        <button class="auth-toggle" id="showSignup"><i class="fas fa-user-plus"></i> Need an account? Sign up</button>
      </div>
      <div class="auth-form hidden animate-fadeIn" id="signupForm">
        <h2>Sign Up</h2>
        <div class="error-message" id="signupError"></div>
        <input type="text" id="signupUsername" placeholder="Username" required>
        <input type="password" id="signupPassword" placeholder="Password" required>
        <button id="signupBtn"><i class="fas fa-user-plus"></i> Sign Up</button>
        <button class="auth-toggle" id="showLogin"><i class="fas fa-sign-in-alt"></i> Already have an account? Login</button>
      </div>
    </div>

    <div id="appContent" class="hidden">
      <div class="app-header">
        <h1 class="animate-slideIn">Work Session Tracker</h1>
        <button class="logout-btn" id="logoutBtn"><i class="fas fa-sign-out-alt"></i> Logout</button>
      </div>
      
      <div class="timer" id="timerDisplay">00:00:00.00</div>
      
      <input type="text" id="sessionName" placeholder="What are you working on?" />
      
      <div class="controls">
        <button id="startBtn"><i class="fas fa-play"></i> Start Session</button>
        <button id="stopBtn" disabled><i class="fas fa-stop"></i> Stop Session</button>
      </div>
      
      <div class="session-list" id="sessionList"></div>
    </div>
  </div>

  <div class="rightbar">
    <div class="session-count-label">Sessions Completed</div>
    <div class="session-count" id="sessionCount">0</div>
    
    <div class="all-badges" id="allBadges">
      <div class="badge-section">
        <div class="badge-section-title"><i class="fas fa-trophy"></i> Your Badges</div>
        <div class="badge-grid" id="badgeGrid"></div>
      </div>
    </div>
  </div>

  <!-- Toast notification -->
  <div class="toast" id="toast">
    <i class="fas fa-check-circle"></i>
    <span id="toastMessage">Session saved successfully!</span>
  </div>

  <script>
    // DOM Elements
    const timerDisplay = document.getElementById('timerDisplay');
    const startBtn = document.getElementById('startBtn');
    const stopBtn = document.getElementById('stopBtn');
    const sessionList = document.getElementById('sessionList');
    const sessionCount = document.getElementById('sessionCount');
    const sessionNameInput = document.getElementById('sessionName');
    const quoteBox = document.getElementById('quote');
    const userInfo = document.getElementById('userInfo');
    const authContainer = document.getElementById('authContainer');
    const appContent = document.getElementById('appContent');
    const currentBadge = document.getElementById('currentBadge');
    const badgeInfo = document.getElementById('badgeInfo');
    const progressBar = document.getElementById('progressBar');
    const allBadges = document.getElementById('allBadges');
    const badgeGrid = document.getElementById('badgeGrid');
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toastMessage');

    // Auth elements
    const loginForm = document.getElementById('loginForm');
    const signupForm = document.getElementById('signupForm');
    const loginBtn = document.getElementById('loginBtn');
    const signupBtn = document.getElementById('signupBtn');
    const showSignup = document.getElementById('showSignup');
    const showLogin = document.getElementById('showLogin');
    const loginUsername = document.getElementById('loginUsername');
    const loginPassword = document.getElementById('loginPassword');
    const signupUsername = document.getElementById('signupUsername');
    const signupPassword = document.getElementById('signupPassword');
    const loginError = document.getElementById('loginError');
    const signupError = document.getElementById('signupError');

    // App state
    let startTime = null;
    let timerInterval = null;
    let currentUser = null;

    const quotes = [
      "Discipline is the bridge between goals and accomplishment. — Jim Rohn",
      "You don't have to be extreme, just consistent.",
      "Small steps every day lead to big results over time.",
      "Focus on progress, not perfection.",
      "The secret of getting ahead is getting started. — Mark Twain",
      "Productivity is never an accident. It's always the result of commitment to excellence. — Paul J. Meyer",
      "The way to get started is to quit talking and begin doing. — Walt Disney",
      "Your future is created by what you do today, not tomorrow. — Robert Kiyosaki",
      "It's not about having time, it's about making time.",
      "Success is the sum of small efforts, repeated day in and day out. — Robert Collier"
    ];

    // Badge system configuration
    const badgeSystem = [
      { name: "Clown", class: "badge-clown", hours: 0, emoji: "🤡" },
      { name: "Noob", class: "badge-noob", hours: 1, emoji: "👶" },
      { name: "Novice", class: "badge-novice", hours: 5, emoji: "🧒" },
      { name: "Apprentice", class: "badge-apprentice", hours: 10, emoji: "🧑‍🎓" },
      { name: "Regular", class: "badge-regular", hours: 25, emoji: "🧑‍💼" },
      { name: "Dedicated", class: "badge-dedicated", hours: 50, emoji: "🧑‍🔧" },
      { name: "Professional", class: "badge-professional", hours: 100, emoji: "🧑‍⚕️" },
      { name: "Master", class: "badge-master", hours: 250, emoji: "🧙‍♂️" },
      { name: "Sigma", class: "badge-sigma", hours: 500, emoji: "🦸‍♂️" },
      { name: "Chad", class: "badge-chad", hours: 750, emoji: "🧑‍🚀" },
      { name: "Sigma Chad", class: "badge-sigma-chad", hours: 900, emoji: "🦸‍♂️" },
      { name: "Giga Chad", class: "badge-giga-chad", hours: 950, emoji: "🧞‍♂️" },
      { name: "Sigma Giga Chad", class: "badge-sigma-giga-chad", hours: 1000, emoji: "🦹‍♂️" }
    ];

    init();

    async function hashPassword(password) {
      const encoder = new TextEncoder();
      const data = encoder.encode(password);
      const hashBuffer = await crypto.subtle.digest('SHA-256', data);
      return Array.from(new Uint8Array(hashBuffer)).map(b => b.toString(16).padStart(2, '0')).join('');
    }

    function init() {
      const loggedInUser = localStorage.getItem('currentUser');
      if (loggedInUser) { 
        currentUser = JSON.parse(loggedInUser); 
        showApp(); 
      } else {
        showAuth(); 
      }
      
      quoteBox.textContent = quotes[Math.floor(Math.random() * quotes.length)];
      
      // Event listeners
      startBtn.addEventListener('click', startSession);
      stopBtn.addEventListener('click', stopSession);
      logoutBtn.addEventListener('click', logout);
      loginBtn.addEventListener('click', login);
      signupBtn.addEventListener('click', signup);
      
      showSignup.addEventListener('click', () => { 
        loginForm.classList.add('hidden'); 
        signupForm.classList.remove('hidden'); 
      });
      
      showLogin.addEventListener('click', () => { 
        signupForm.classList.add('hidden'); 
        loginForm.classList.remove('hidden'); 
      });
    }

    function formatTime(ms) {
      const totalSeconds = Math.floor(ms / 1000);
      const hours = Math.floor(totalSeconds / 3600);
      const minutes = Math.floor((totalSeconds % 3600) / 60);
      const seconds = totalSeconds % 60;
      const centis = Math.floor((ms % 1000) / 10);
      return `${String(hours).padStart(2,'0')}:${String(minutes).padStart(2,'0')}:${String(seconds).padStart(2,'0')}.${String(centis).padStart(2,'0')}`;
    }

    function startSession() {
      const title = sessionNameInput.value.trim();
      if (!title) { 
        showToast("Please enter a session name", "danger");
        return; 
      }
      
      startTime = Date.now();
      startBtn.disabled = true;
      stopBtn.disabled = false;
      sessionNameInput.disabled = true;
      
      timerInterval = setInterval(() => {
        timerDisplay.textContent = formatTime(Date.now() - startTime);
      }, 50);
      
      // Animation effect
      timerDisplay.classList.add('animate__animated', 'animate__pulse');
      setTimeout(() => {
        timerDisplay.classList.remove('animate__animated', 'animate__pulse');
      }, 1000);
    }

    function stopSession() {
      clearInterval(timerInterval);
      stopBtn.disabled = true;
      startBtn.disabled = false;
      sessionNameInput.disabled = false;
      
      const end = Date.now();
      const duration = end - startTime;
      const title = sessionNameInput.value.trim();
      
      const newSession = { 
        id: Date.now(), 
        name: title, 
        start: new Date(startTime).toLocaleString(), 
        duration: formatTime(duration), 
        durationMs: duration 
      };
      
      const users = JSON.parse(localStorage.getItem('users')) || {};
      users[currentUser.username] = users[currentUser.username] || { password: '', sessions: [] };
      users[currentUser.username].sessions.push(newSession);
      localStorage.setItem('users', JSON.stringify(users));
      
      renderSessions();
      updateBadges();
      timerDisplay.textContent = '00:00:00.00';
      sessionNameInput.value = '';
      
      // Show success animation
      showToast("Session saved successfully!", "success");
      createConfetti();
      
      // Animation effects
      timerDisplay.classList.add('animate__animated', 'animate__bounce');
      setTimeout(() => {
        timerDisplay.classList.remove('animate__animated', 'animate__bounce');
      }, 1000);
    }

    function calculateTotalHours() {
      const users = JSON.parse(localStorage.getItem('users')) || {};
      const sess = users[currentUser.username]?.sessions || [];
      return sess.reduce((sum, s) => sum + (s.durationMs || 0), 0) / 3600000;
    }

    function getCurrentBadgeIndex(hours) {
      for (let i = badgeSystem.length - 1; i >= 0; i--) {
        if (hours >= badgeSystem[i].hours) return i;
      }
      return 0;
    }

    function updateBadges() {
      const hours = calculateTotalHours();
      const idx = getCurrentBadgeIndex(hours);
      const current = badgeSystem[idx];
      
      currentBadge.innerHTML = `
        <div class='badge ${current.class} current-badge animate__animated animate__pulse'>
          ${current.emoji} ${current.name}
        </div>
      `;
      
      if (idx < badgeSystem.length - 1) {
        const next = badgeSystem[idx+1];
        const progress = ((hours - current.hours)/(next.hours - current.hours))*100;
        progressBar.style.width = `${Math.min(100, progress)}%`;
        badgeInfo.innerHTML = `<i class="fas fa-arrow-up"></i> ${Math.round(hours)}/${next.hours} hours to ${next.name}`;
      } else {
        progressBar.style.width = '100%';
        badgeInfo.innerHTML = `<i class="fas fa-crown"></i> Legendary ${current.name} with ${Math.round(hours)} hours!`;
      }
      
      // === TOTAL HOURS DISPLAY === //
      const existingTotalDisplay = document.querySelector('.total-hours');
      if (existingTotalDisplay) existingTotalDisplay.remove();
      
      const totalHoursDisplay = document.createElement('div');
      totalHoursDisplay.className = 'total-hours';
      totalHoursDisplay.innerHTML = `
        <i class="fas fa-clock"></i> Total: <strong>${Math.round(hours * 10) / 10} hours</strong>
      `;
      document.querySelector('.badge-container').appendChild(totalHoursDisplay);
      
      // Update the badge grid
      badgeGrid.innerHTML = '';
      badgeSystem.forEach((b, i) => {
        const badgeEl = document.createElement('div');
        badgeEl.className = `badge-item ${i > idx ? 'locked-badge' : ''}`;
        
        badgeEl.innerHTML = `
          <div class="badge-icon ${b.class}">${b.emoji}</div>
          <div class="badge-name">${b.name}</div>
          <div class="badge-requirement">${i > idx ? `${b.hours} hrs` : 'Unlocked!'}</div>
        `;
        
        badgeGrid.appendChild(badgeEl);
      });
    }

    function renderSessions() {
      const users = JSON.parse(localStorage.getItem('users')) || {};
      const sess = users[currentUser.username]?.sessions || [];
      
      sessionList.innerHTML = '';
      
      if (sess.length === 0) {
        sessionList.innerHTML = `
          <div class="empty-state">
            <i class="fas fa-hourglass-half"></i>
            <h3>No sessions recorded yet</h3>
            <p>Start your first session to begin tracking your productivity!</p>
          </div>
        `;
        return;
      }
      
      sess.slice().reverse().forEach((s, index) => {
        const div = document.createElement('div');
        div.className = 'session animate__animated animate__fadeIn';
        div.style.animationDelay = `${index * 0.1}s`;
        
        div.innerHTML = `
          <div class="session-details">
            <div class="session-name">${s.name}</div>
            <div class="session-meta">
              <span><i class="fas fa-calendar-alt"></i> <strong>Started:</strong> ${s.start}</span>
              <span><i class="fas fa-clock"></i> <strong>Duration:</strong> ${s.duration}</span>
            </div>
          </div>
          <button class='delete-btn' onclick='deleteSession(${s.id})'><i class="fas fa-trash-alt"></i> Delete</button>
        `;
        
        sessionList.appendChild(div);
      });
      
      sessionCount.textContent = sess.length;
      updateBadges();
    }

    function deleteSession(id) {
      if (!confirm('Are you sure you want to delete this session?')) return;
      
      const users = JSON.parse(localStorage.getItem('users')) || {};
      users[currentUser.username].sessions = users[currentUser.username].sessions.filter(s => s.id !== id);
      localStorage.setItem('users', JSON.stringify(users));
      renderSessions();
      showToast("Session deleted", "danger");
    }

    async function login() {
      loginError.textContent = '';
      const username = loginUsername.value.trim();
      const password = loginPassword.value;
      
      if (!username || !password) {
        loginError.innerHTML = `<i class="fas fa-exclamation-circle"></i> Please enter both username and password`;
        return;
      }
      
      const users = JSON.parse(localStorage.getItem('users')) || {};
      
      if (!users[username]) {
        loginError.innerHTML = `<i class="fas fa-user-slash"></i> User does not exist`;
        return;
      }
      
      const hashedPassword = await hashPassword(password);
      
      if (users[username].password !== hashedPassword) {
        loginError.innerHTML = `<i class="fas fa-lock"></i> Invalid password`;
        return;
      }
      
      currentUser = { username };
      localStorage.setItem('currentUser', JSON.stringify(currentUser));
      showApp();
      showToast(`Welcome back, ${username}!`, "success");
    }

    async function signup() {
      signupError.textContent = '';
      const username = signupUsername.value.trim();
      const password = signupPassword.value;
      
      if (!username || !password) {
        signupError.innerHTML = `<i class="fas fa-exclamation-circle"></i> Please enter both username and password`;
        return;
      }
      
      if (password.length < 6) {
        signupError.innerHTML = `<i class="fas fa-shield-alt"></i> Password must be at least 6 characters`;
        return;
      }
      
      const users = JSON.parse(localStorage.getItem('users')) || {};
      
      if (users[username]) {
        signupError.innerHTML = `<i class="fas fa-user-times"></i> Username already exists`;
        return;
      }
      
      const hashedPassword = await hashPassword(password);
      users[username] = { password: hashedPassword, sessions: [] };
      
      localStorage.setItem('users', JSON.stringify(users));
      currentUser = { username };
      localStorage.setItem('currentUser', JSON.stringify(currentUser));
      showApp();
      showToast(`Account created successfully!`, "success");
      createConfetti();
    }

    function logout() {
      if (!confirm('Are you sure you want to logout?')) return;
      
      currentUser = null;
      localStorage.removeItem('currentUser');
      showAuth();
      
      // Clear form fields
      loginUsername.value = '';
      loginPassword.value = '';
      signupUsername.value = '';
      signupPassword.value = '';
      loginError.textContent = '';
      signupError.textContent = '';
      
      showToast("Logged out successfully", "danger");
    }

    function showApp() {
      authContainer.classList.add('hidden');
      appContent.classList.remove('hidden');
      userInfo.innerHTML = `<i class="fas fa-user"></i> Welcome, <strong>${currentUser.username}</strong>`;
      renderSessions();
      
      // Change quote every 30 seconds
      setInterval(() => {
        quoteBox.textContent = quotes[Math.floor(Math.random() * quotes.length)];
        quoteBox.classList.add('animate__animated', 'animate__fadeIn');
        setTimeout(() => {
          quoteBox.classList.remove('animate__animated', 'animate__fadeIn');
        }, 1000);
      }, 30000);
    }

    function showAuth() {
      authContainer.classList.remove('hidden');
      appContent.classList.add('hidden');
      userInfo.textContent = '';
      loginForm.classList.remove('hidden');
      signupForm.classList.add('hidden');
    }
    
    function showToast(message, type = "success") {
      toastMessage.textContent = message;
      
      // Update toast style based on type
      if (type === "danger") {
        toast.style.borderLeftColor = "var(--danger)";
        toast.querySelector('i').className = "fas fa-exclamation-circle";
        toast.querySelector('i').style.color = "var(--danger)";
      } else {
        toast.style.borderLeftColor = "var(--success)";
        toast.querySelector('i').className = "fas fa-check-circle";
        toast.querySelector('i').style.color = "var(--success)";
      }
      
      // Show toast
      toast.classList.add('show');
      
      // Hide after 3 seconds
      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }
    
    function createConfetti() {
      const colors = ['#4361ee', '#4895ef', '#4cc9f0', '#f72585', '#7209b7'];
      
      for (let i = 0; i < 100; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
        confetti.style.left = Math.random() * 100 + 'vw';
        confetti.style.animationDuration = (Math.random() * 2 + 2) + 's';
        confetti.style.animationDelay = Math.random() * 2 + 's';
        document.body.appendChild(confetti);
        
        setTimeout(() => {
          confetti.remove();
        }, 3000);
      }
    }
  </script>
  
  <script>
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/service-worker.js').then(reg => {
        console.log('Service Worker registered.');

        // Background Sync
        if ('sync' in reg) {
          reg.sync.register('sync-data').catch(console.error);
        }

        // Periodic Sync (optional, requires permission)
        if ('periodicSync' in reg) {
          navigator.permissions.query({ name: 'periodic-background-sync' }).then(result => {
            if (result.state === 'granted') {
              reg.periodicSync.register('update-content', {
                minInterval: 24 * 60 * 60 * 1000, // once a day
              });
            }
          });
        }
      });
    }

    // Ask for notification permission
    if (Notification && Notification.permission !== 'granted') {
      Notification.requestPermission();
    }
  </script>
</body>
</html>
